/* Generated By:JJTree: Do not edit this line. ASTSetOrSequenceOfType.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javacc;

import java.io.IOException;
import java.io.OutputStream;
import java.util.Vector;

public class ASTSetOrSequenceOfType extends SimpleNode {
	public static final int SEQUENCE_OF = 0;
	public static final int SET_OF = 1;
	protected int type;

	protected void
	setType(int seq)
	{
		if(seq == 0)
			type = SEQUENCE_OF;
		else
			type = SET_OF;
	}

	protected boolean
	isSequenceOf()
	{
		if(type == SEQUENCE_OF)
			return true;

		return false;
	}

	protected boolean
	isSetOf()
	{
		if(type == SEQUENCE_OF)
			return false;

		return true;
	}

    @Override
    protected boolean generateClassDirectiveText( OutputStream outputStream, String directiveName, StringBuffer line) throws IOException {
        boolean returnValue = false;
        if(directiveName.equals("elementtype"))	// insert a list of declarations
        {
            String elementType = getElementType();
            int idx = line.indexOf("@");
            String left = line.substring(0, idx);
            int ndx = line.indexOf("@", idx + 1);
            String right = line.substring(ndx + 1);
            // replace the contents
            line.setLength(0);
            line.append(left + elementType + right);
            returnValue = true;
        }
        return returnValue;
    }

    /**
     * Look through children to try and find where elements are assuming they exist somewhere lower.
     * @return
     */
    private SimpleNode getElementContainer() {
        int numChildren = jjtGetNumChildren();
        for(int i = 0; i < numChildren; i++) {
            Node n = jjtGetChild(i);
            if (n instanceof ASTBuiltinType) {
                return (SimpleNode)n.jjtGetChild( 0 );
            }
        }
        return  null;
    }

    @Override
    protected String getInnerClassTemplateName() {
        // this is really returning the type of the item that this is a set or sequence of
        SimpleNode n = getElementContainer();
        // the parent actually as the information about what type of object it is
        String elementType = ((ASTBuiltinType)n.jjtGetParent()).getType().toLowerCase().replace( " ", "" );
        return elementType + "element";
    }

    @Override
    protected Vector<ASTElementType> getElements() {
        SimpleNode n = getElementContainer();
        if (n != null) {
            return n.getElements();
        } else {
            return super.getElements();
        }
    }

    /**
	 * Creates the source file for the named class, extending either the SetOf
	 * or SequenceOf class.
	 */
	public void
	generateClass(String name)
	{
		/*////////////////////////////////////////////////////////////////////////
		 * Added by Fatih Batuk to fix the problem at generation of SET OF classes
		 */
		SimpleNode main = (SimpleNode)this;
		String nodeType =  main.jjtGetFirstToken().image; // "SET" or "SEQUENCE"
		if (nodeType.equalsIgnoreCase("SET")) {
			type = SET_OF; 
		}
        String templateName;
        if(isSetOf() == true)
        {
            templateName = "setof";
        }
        else
        {
            templateName = "sequenceof";
        }
        generateClass( name, templateName );
	}

	private String
	getElementType()
	{
		String eType;

		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
			{
				ASTBuiltinType et = (ASTBuiltinType)n;
				eType = et.getClassName();
				eType = eType.replace('-', '_');
				return eType;
			}

			if(n instanceof ASTDefinedType)
			{
				ASTDefinedType et = (ASTDefinedType)n;
				eType = et.getClassName();
				eType = eType.replace('-', '_');
				return eType;
			}
		}

		// should throw an exception or something
		return "UnknownType";
	}

  public ASTSetOrSequenceOfType(int id) {
    super(id);
  }

  public ASTSetOrSequenceOfType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {

    return
    visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=29fbe02477e05c8117097d1f513f6b09 (do not edit this line) */
