/* Generated By:JJTree: Do not edit this line. ASTDefinedType.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javacc;

import java.io.IOException;
import java.io.OutputStream;

public class ASTDefinedType extends SimpleNode {

	/**
	 * Assumes there is child of type "typereference".
	 */
    public String getClassName()
	{
		for(int i = 0; i < jjtGetNumChildren(); i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTtypereference != true)
				continue;

			return ((ASTtypereference)n).getClassName().replace('-', '_');
		}

		return null;
	}

    public String getBaseClassName()
    {
        StringBuilder retVal = new StringBuilder();
        for(int i = 0; i < jjtGetNumChildren(); i++)
        {
            Node n = jjtGetChild(i);
            if (n instanceof ASTmodulereference) {
                if(AsnParser.outputPackage != null) {
                    retVal.append( AsnParser.outputPackage + "." );
                }
                retVal.append(((ASTmodulereference)n).jjtGetFirstToken().image.toLowerCase() + ".");
            }

            if(n instanceof ASTtypereference != true)
                continue;

            retVal.append ( ((ASTtypereference)n).getClassName().replace('-','_'));
            return retVal.toString();
        }

        return null;
    }

    public String
	getType()
	{
		for(int i = 0; i < jjtGetNumChildren(); i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTtypereference != true)
				continue;

			return ((SimpleNode)n).jjtGetFirstToken().image.replace('-', '_');
		}

		return null;
	}

    @Override
    protected boolean generateClassDirectiveText( OutputStream outputStream, String directiveName, StringBuffer line) throws IOException {
        boolean returnValue = false;
        if(directiveName.equals("baseclass"))	// replace with the base class name
        {
            int idx = line.indexOf("@");
            String left = line.substring(0, idx);
            int ndx = line.indexOf("@", idx + 1);
            String right = line.substring(ndx + 1);
            // replace the contents
            line.setLength(0);
            line.append(left + getBaseClassName() + right);
            returnValue = true;
        }
        return returnValue;
    }

    public void
	createClass(String name)
	{
        generateClass(name,"definedtype");
	}

  public ASTDefinedType(int id) {
    super(id);
  }

  public ASTDefinedType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {

    return
    visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=773bfe1618eacaaa7ac5bd296ec41d4c (do not edit this line) */
